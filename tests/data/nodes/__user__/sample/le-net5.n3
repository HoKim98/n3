# use Yolov5 by ultralytics  # https://github.com/ultralytics/yolov5

node LeNet5:
    let K: kernel size = int 5

    let W: width = int 28
    let H: height = int 28

    with Conv2D:
        set kernel size = K
        set padding = K / 2
        set stride = 2

    node MyRelu:
        1. Relu

    node MyConv:
        1. Conv2D
        2. Relu

    0. Input                   =  1, W  , H
    1. MyConv                  = 32, W/2, H/2
    2. MyConv                  = 64, W/4, H/4
    3. Transform               = 64* W/4* H/4
    4. Linear + Relu + Dropout = 1024
    5. Linear + Softmax(D=-1)  = 10

    # 튜플 출력 활용하기
    # 0. Input
    #     x = 3, 224, 224  # 크기 생략 가능
    #     class = 1000     # 이름이 반드시 동일해야 함!! (named_tuple)

    #     값 참조법: class$0  { 이름? $ 노드명 }
    #     모든 입출력은 튜플이며, 이름을 지정하지 않다면 그 값은 "x"이다.
    #     예) $3 == x$3

    # 튜플 입력 활용하기
    # 3. Backward{x=x$2, class=class$0}()  # 일반 인자는 소괄호 ()에 넣는다.

    # 가장 최근의 값을 가리키고 싶을 때는, 노드 번호를 생략할 수 있다.
    # 3. Backward{x=x$, class=class$}  # x는 2번 노드에서, class는 0번 노드에서 가장 마지막으로 정의된 경우에만.

    # 입력값에 해당하는 이름이 존재할 때는, 입력을 생략할 수 있다.
    # 3. Backward{x=x$}          # class를 생략한 경우
    # 3. Backward{class=class$}  # x를 생략한 경우
    # 3. Backward                # 모두 생략한 경우. 중괄호도 생략 가능하다.

    # Concat 등 특수한 함수에는 이름을 지정할 필요가 없다. 하지만 순서가 존재한다.
    # 3. Concat[x$, x$1, x$0]  # 순서가 있는 입력에는 중괄호 대신 대괄호를 사용한다.

    # 이항 연산자, 일반적인 연산자 또한 이름을 지정할 필요는 없다.
    # 중요한 점은, [] 연산자를 쓰는 입력값은 표기를 생략할 수 없다!
    # 입력값에는 실수값을 입력할 수도 있다.
    # 3. Add[x$1, x$0]
    # 3. Pow[x$, 2]

# exec: n3 test --model LeNet5 --shape 3x640x480
# exec: n3 test --model LeNet5 --input mnist10
